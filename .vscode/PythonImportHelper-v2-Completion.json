[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "isExtraImport": true,
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.0048c19383ec_create_user_table",
        "description": "alembic.versions.0048c19383ec_create_user_table",
        "peekOfCode": "def upgrade():\n    op.create_table('users', sa.Column('id', sa.Integer(), nullable=False),\n                    sa.Column('email', sa.String(), nullable=False),\n                    sa.Column('password', sa.String(), nullable=False),\n                    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('now()')),\n                    sa.PrimaryKeyConstraint('id'),\n                    sa.UniqueConstraint('email'))\n    pass\ndef downgrade():\n    op.drop_table('users')",
        "detail": "alembic.versions.0048c19383ec_create_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.0048c19383ec_create_user_table",
        "description": "alembic.versions.0048c19383ec_create_user_table",
        "peekOfCode": "def downgrade():\n    op.drop_table('users')\n    pass",
        "detail": "alembic.versions.0048c19383ec_create_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "description": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'phone_number')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "description": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'phone_number')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.0c0d07d27d56_add_phone_number_to_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "description": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "peekOfCode": "def upgrade():\n    op.add_column('posts', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "description": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "peekOfCode": "def downgrade():\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic.versions.26b155016a23_add_content_column_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "description": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "peekOfCode": "def upgrade():\n    op.add_column('posts', sa.Column('published', sa.Boolean(), server_default='TRUE', nullable=False))\n    op.add_column('posts', sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('now()')))\n    pass\ndef downgrade():\n    op.drop_column('posts', 'published')\n    op.drop_column('posts', 'created_at')\n    pass",
        "detail": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "description": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "peekOfCode": "def downgrade():\n    op.drop_column('posts', 'published')\n    op.drop_column('posts', 'created_at')\n    pass",
        "detail": "alembic.versions.6386b986b217_add_last_few_columns_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.dea070db6cbf_auto_vote",
        "description": "alembic.versions.dea070db6cbf_auto_vote",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes', sa.Column('users_id', sa.Integer(), nullable=False),\n                    sa.Column('posts_id', sa.Integer(), nullable=False),\n                    sa.ForeignKeyConstraint(['posts_id'], ['posts.id'], ondelete='CASCADE'),\n                    sa.ForeignKeyConstraint(['users_id'], ['users.id'], ondelete='CASCADE'),\n                    sa.PrimaryKeyConstraint('users_id', 'posts_id'))\n    pass\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "alembic.versions.dea070db6cbf_auto_vote",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.dea070db6cbf_auto_vote",
        "description": "alembic.versions.dea070db6cbf_auto_vote",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('votes')\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.dea070db6cbf_auto_vote",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "description": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "peekOfCode": "def upgrade():\n    op.add_column('posts', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('posts_users_fk', source_table='posts', referent_table='users',\n                          local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")\n    pass\ndef downgrade():\n    op.drop_constraint('posts_users_fk', table_name='posts')\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "description": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "peekOfCode": "def downgrade():\n    op.drop_constraint('posts_users_fk', table_name='posts')\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic.versions.e7eca918cf9e_add_foreign_key_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.f7485664fae7_create_posts_table",
        "description": "alembic.versions.f7485664fae7_create_posts_table",
        "peekOfCode": "def upgrade():\n    op.create_table('posts', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),\n                    sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade():\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.f7485664fae7_create_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.f7485664fae7_create_posts_table",
        "description": "alembic.versions.f7485664fae7_create_posts_table",
        "peekOfCode": "def downgrade():\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.f7485664fae7_create_posts_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", f'postgresql+psycopg2://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}')\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    # OAuth2PasswordRequestForm required fiels are \"username\" and \"password\",\n    # that's why, in the code below, we compare the \"email\" field from our models with \"username\".\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid Credentials\")\n    # create token\n    # return token",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags=[\"Authentication\"])\n@router.post('/login', response_model=schemas.Token)\ndef login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    # OAuth2PasswordRequestForm required fiels are \"username\" and \"password\",\n    # that's why, in the code below, we compare the \"email\" field from our models with \"username\".\n    user = db.query(models.User).filter(models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Invalid Credentials\")",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user),\n              limit: int = 10, skip: int = 0, search: Optional[str] = \"\"): # The \"db\" parameter (available in the FastAPI documentation)\n                                                                           # needs to be used when we want to perform a database\n                                                                           # operation with SQLAclhemy. The \"limit\" parameter will be\n                                                                           # used whenever we want to specify a query parameter for\n                                                                           # our routers/endpoints.\n    # cursor.execute(\"\"\"SELECT * FROM posts\"\"\")\n    # posts = cursor.fetchall()\n    # posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    posts = db.query(models.Post, func.count(models.Vote.posts_id).label(\"votes\")).join(",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_post(post: schemas.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)): # The post argument is used to make sure the request comes with the schema we provided    \n    # cursor.execute(\"\"\"INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING *\"\"\", (post.title, post.content, post.published))\n    # In the above code, we don't code with fstring here because that would make the code vunerable to SQL injection,\n    # where the user could pass SQL statements into the code, which could potentially breach security.\n    # new_post = cursor.fetchone()\n    # conn.commit()\n    new_post = models.Post(owner_id=current_user.id, **post.dict()) # We call the dict() method (with ** to unpack it) instead of\n                                                                    # mannualy calling each field (.title .content etc) so that\n                                                                    # if the schema has many user provided fields we don't need\n                                                                    # to hard code every one of them.",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)): # Checks and validates if id input can be converted to an integer\n    # cursor.execute(\"\"\"SELECT * FROM posts WHERE id = %s\"\"\", (id,))\n    # A tuple with a single element is used because that's the psycopg3 syntax\n    # post = cursor.fetchone()\n    post = db.query(models.Post, func.count(models.Vote.posts_id).label(\"votes\")).join(\n        models.Vote, models.Vote.posts_id == models.Post.id, isouter=True).group_by(\n            models.Post.id).filter(models.Post.id == id).first()      # Finds the 1st instance with that id\n                                                                      # and returns it.\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id {id} was not found.\")",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_post(id: int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"DELETE FROM posts WHERE id = %s RETURNING *\"\"\", (id,))\n    # deleted_post = cursor.fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id {id} does not exist.\")\n    if post.owner_id != current_user.id:\n        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=\"Not authorized to perform requested action.\")",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_post(id: int, updated_post: schemas.PostCreate, db: Session = Depends(get_db), \n                current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\"UPDATE posts SET title = %s, content = %s, published = %s WHERE id = %s RETURNING *\"\"\", (post.title, post.content, post.published, id))\n    # updated_post = cursor.fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id {id} does not exist.\")\n    if post.owner_id != current_user.id:",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",  # The prefix for the specified url of each path operation\n    tags=[\"Posts\"]    # The tag is used to organize the documentation file in groups\n)\n# @router.get(\"/\", response_model=List[schemas.PostResponse])\n@router.get(\"/\", response_model=List[schemas.PostOut])\ndef get_posts(db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user),\n              limit: int = 10, skip: int = 0, search: Optional[str] = \"\"): # The \"db\" parameter (available in the FastAPI documentation)\n                                                                           # needs to be used when we want to perform a database\n                                                                           # operation with SQLAclhemy. The \"limit\" parameter will be",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    # First we have to hash the password, which will be retrieved from user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n# Retrieving information about a specific user based on their id",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user(id: int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"User with id {id} does not exist.\")\n    return user",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(prefix=\"/users\", tags=[\"Users\"])\n@router.post(\"/\", status_code=status.HTTP_201_CREATED, response_model=schemas.UserResponse)\ndef create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):\n    # First we have to hash the password, which will be retrieved from user.password\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "vote",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def vote(vote: schemas.Vote, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id of {vote.post_id} does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.posts_id == vote.post_id, models.Vote.users_id == current_user.id)\n    found_vote = vote_query.first()\n    if vote.dir == 1:\n        if found_vote:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f\"User with id of {current_user.id} has already voted on post {vote.post_id}\")\n        new_vote = models.Vote(posts_id = vote.post_id, users_id = current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "router = APIRouter(prefix=\"/vote\", tags=[\"Vote\"])\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef vote(vote: schemas.Vote, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id of {vote.post_id} does not exist\")\n    vote_query = db.query(models.Vote).filter(models.Vote.posts_id == vote.post_id, models.Vote.users_id == current_user.id)\n    found_vote = vote_query.first()\n    if vote.dir == 1:\n        if found_vote:",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name: str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n'''\nThe code below is not being used, it's left here as reference, \nin case we want to use raw SQL with Psycopg instead of an ORM like SQLAlchemy.\n'''",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{settings.database_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n'''",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\n# Dependency\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n'''\nThe code below is not being used, it's left here as reference, ",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"Welcome to my new API!\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = ['*']\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(post.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = ['*']\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(post.router)\napp.include_router(user.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default='TRUE', nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), nullable=False)\n    owner = relationship(\"User\") # This is an SQLAlchemy functionality to create a relationship between models,\n                                 # and has nothing to do with table raltions in our database.",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    phone_number = Column(String, nullable=True)\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    posts_id = Column(Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    posts_id = Column(Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True, nullable=False)\n    users_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM)\n        id: str = payload.get(\"user_id\")",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM)\n        id: str = payload.get(\"user_id\")\n        if id is None:\n            raise credentials_exception\n        token_data = schemas.TokenData(id=id)\n    except JWTError:\n        raise credentials_exception\n    return token_data",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oath2_scheme), db: Session = Depends(database.get_db)): # Anytime the client requests an information that will\n                                                                                                  # require the user to be logged-in, this funtion will be \n                                                                                                  # used to verify that they provide an access token.\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Could not validate credentials\", headers={\"WWW-Authenticate\": \"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oath2_scheme",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oath2_scheme = OAuth2PasswordBearer(tokenUrl='login')\n# SECRET_KEY\n# Algorithm\n# Expiration time\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_access_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=ALGORITHM)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True # If the user doesn't provide a value it's going to defaut to true\nclass PostCreate(PostBase):\n    pass\nclass UserResponse(BaseModel):\n    id: int\n    created_at: datetime\n    email: EmailStr",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostCreate(PostBase):\n    pass\nclass UserResponse(BaseModel):\n    id: int\n    created_at: datetime\n    email: EmailStr\n    class Config:\n        orm_mode = True\n # It is also interesintg to define a model for a response to be sent back to the client,\n # so that we only show the user what we want them to see",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    created_at: datetime\n    email: EmailStr\n    class Config:\n        orm_mode = True\n # It is also interesintg to define a model for a response to be sent back to the client,\n # so that we only show the user what we want them to see\nclass PostResponse(PostBase):\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostResponse(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int       # We don't add this field in the parent class because we don't want the user to have to \n                        # provide the owner_id everytime he wants to access a post.\n    owner: UserResponse\n    class Config:       # Explanation: https://fastapi.tiangolo.com/tutorial/sql-databases/#create-pydantic-models-schemas-for-reading-returning\n                        # https://youtu.be/0sOvCWFmrtA?t=20417\n        orm_mode = True\nclass PostOut(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostOut(BaseModel):\n    Post: PostResponse\n    votes: int\n    class Config:\n        orm_mode = True\nclass UserCreate(BaseModel):\n    email: EmailStr         # Pydantic lib that checks if the user provided a valid email\n    password: str\nclass UserLogin(BaseModel):\n    email: EmailStr",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: EmailStr         # Pydantic lib that checks if the user provided a valid email\n    password: str\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: Literal[0, 1]      # Validates that the only allowed integers are 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: Optional[str] = None\nclass Vote(BaseModel):\n    post_id: int\n    dir: Literal[0, 1]      # Validates that the only allowed integers are 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: Literal[0, 1]      # Validates that the only allowed integers are 0 or 1",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\n# Function to get the raw password, hash it, and then compare to the hash in the database\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\") # Telling passlib which encryption algorithm to use (bcrypt)\ndef hash(password: str):\n    return pwd_context.hash(password)\n# Function to get the raw password, hash it, and then compare to the hash in the database\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]